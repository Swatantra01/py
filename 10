import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from xgboost import XGBClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer

# Load dataset

data = pd.read_csv('diabetes1.csv')

# Fill missing values
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
data_imputed = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)

# Ensure target is integer (binary)
data_imputed['Outcome'] = data_imputed['Outcome'].astype(int)

# Split data into features and target
X = data_imputed.drop('Outcome', axis=1)
y = data_imputed['Outcome']

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# AdaBoost Classifier
ada = AdaBoostClassifier(n_estimators=100, random_state=42)
ada.fit(X_train, y_train)
y_pred_ada = ada.predict(X_test)

# XGBoost Classifier
xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb.fit(X_train, y_train)
y_pred_xgb = xgb.predict(X_test)wa

# Evaluation metrics
metrics = {
    'Model': ['AdaBoost', 'XGBoost'],
    'Accuracy': [accuracy_score(y_test, y_pred_ada), accuracy_score(y_test, y_pred_xgb)],
    'Precision': [precision_score(y_test, y_pred_ada), precision_score(y_test, y_pred_xgb)],
    'Recall': [recall_score(y_test, y_pred_ada), recall_score(y_test, y_pred_xgb)],
    'F1 Score': [f1_score(y_test, y_pred_ada), f1_score(y_test, y_pred_xgb)],
    'ROC AUC': [roc_auc_score(y_test, y_pred_ada), roc_auc_score(y_test, y_pred_xgb)]
}

# Create DataFrame to display the metrics
results_df = pd.DataFrame(metrics)
print(results_df)
