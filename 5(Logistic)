import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, mean_squared_error
import seaborn as sns

# Load the dataset
# Assuming the dataset is in a CSV file named 'Advertising.csv'
data = pd.read_csv('Advertising.csv')

# Preprocess the data
# Assuming 'Sales' is the target variable and 'TV' is the feature for univariate logistic regression
# Convert 'Sales' to binary classification based on a threshold
threshold = data['sales'].median()
data['sales'] = data['sales'].apply(lambda x: 1 if x > threshold else 0)

# Select the feature and target variable
X = data[['TV']].values  # Feature
y = data['sales'].values  # Target


# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict the classification output for the test data
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f'Accuracy: {accuracy}')
print(f'Precision: {precision}')
print(f'Recall: {recall}')
print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')

# Plotting the logistic regression curve
plt.figure(figsize=(10, 6))

# Plotting the data points
sns.scatterplot(x='TV', y='sales', data=data,hue='sales')



# Plotting the logistic regression curve
x_values = np.linspace(min(X_test), max(X_test), 100)
y_values = model.predict_proba(x_values.reshape(-1, 1))[:, 1]
plt.plot(x_values, y_values, color='r', linewidth=2)

plt.xlabel('TV')
plt.ylabel('Sales')
plt.title('Logistic Regression - Decision Boundary')
plt.legend()
plt.grid(True)
plt.show()
